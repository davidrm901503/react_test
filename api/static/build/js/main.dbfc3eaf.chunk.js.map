{"version":3,"sources":["components/CellTableName.js","components/CellTableChange.js","components/tabla.js","config.js","App.js","reportWebVitals.js","index.js"],"names":["CellTableName","props","className","src","crypto","id","alt","name","CellTableChange","styles","green","color","red","style","quote","USD","percent_change_24h","toFixed","Tabla","columns","selector","row","cmc_rank","sortable","cell","price","format","toLocaleString","market_cap","volume_24h","progressPending","title","data","cryptos","defaultSortFieldId","config","API_BASE_URL","App","useState","setCrypto","setProgressPending","useEffect","getCoins","a","axios","response","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAWeA,MAXf,SAAuBC,GACrB,OACE,+BACE,qBACEC,UAAW,YACXC,IAAK,uDAAyDF,EAAMG,OAAOC,GAAI,OAAQC,IAAI,KAH/F,IAIML,EAAMG,OAAOG,SCORC,MAbf,SAAyBP,GACvB,IAAMQ,EAAS,CAAEC,MAAO,CAAEC,MAAO,WAAaC,IAAK,CAAED,MAAO,YAC5D,OACE,qBACEE,MACEZ,EAAMG,OAAOU,MAAMC,IAAIC,mBAAqB,EAAIP,EAAOG,IAAMH,EAAOC,MAFxE,UAKGT,EAAMG,OAAOU,MAAMC,IAAIC,mBAAmBC,QAAQ,GALrD,QCmDWC,MAlDf,SAAejB,GACb,IAAMkB,EAAU,CACd,CACEZ,KAAM,OACNa,SAAU,SAACC,GAAD,OAASA,EAAIC,UACvBC,UAAU,GAEZ,CACEhB,KAAM,OACNa,SAAU,SAACC,GAAD,OAASA,EAAId,MACvBiB,KAAM,SAACH,GAAD,OAAS,cAAC,EAAD,CAAejB,OAAQiB,MAExC,CACEd,KAAM,QACNa,SAAU,SAACC,GAAD,OAASA,EAAIP,MAAMC,IAAIU,OACjCC,OAAQ,SAACL,GAAD,MAAS,IAAMA,EAAIP,MAAMC,IAAIU,MAAME,kBAC3CJ,UAAU,GAEZ,CACEhB,KAAM,aACNa,SAAU,SAACC,GAAD,OAASA,EAAIP,MAAMC,IAAIa,YACjCF,OAAQ,SAACL,GAAD,MAAS,IAAMA,EAAIP,MAAMC,IAAIa,WAAWD,mBAElD,CACEpB,KAAM,eACNa,SAAU,SAACC,GAAD,OAASA,EAAIP,MAAMC,IAAIc,YACjCH,OAAQ,SAACL,GAAD,MAAS,IAAMA,EAAIP,MAAMC,IAAIc,WAAWF,kBAChDJ,UAAU,GAEZ,CACEhB,KAAM,eACNa,SAAU,SAACC,GAAD,OAASA,EAAIP,MAAMC,IAAIC,oBACjCQ,KAAM,SAACH,GAAD,OAAS,cAAC,EAAD,CAAiBjB,OAAQiB,KACxCE,UAAU,IAId,OACE,qBAAKrB,UAAW,OAASD,EAAM6B,gBAA/B,SACE,cAAC,IAAD,CACEC,MAAM,8CACNZ,QAASA,EACTa,KAAM/B,EAAMgC,QACZH,gBAAiB7B,EAAM6B,gBACvBI,mBAAoB,OC3CbC,EALA,CAEXC,aAAc,8BC0BHC,MArBf,WAEI,MAA6BC,mBAAS,IAAtC,mBAAOL,EAAP,KAAgBM,EAAhB,KACA,EAA8CD,oBAAS,GAAvD,mBAAOR,EAAP,KAAwBU,EAAxB,KAWA,OATAC,qBAAU,WACN,IAAMC,EAAQ,uCAAG,4BAAAC,EAAA,sEACUC,IAAMT,EAAOC,cADvB,OACPS,EADO,OAEbN,EAAUM,EAASb,MACnBQ,GAAmB,GAHN,2CAAH,qDAKdE,MACD,IAGC,qBAAKxC,UAAU,MAAf,SACI,cAAC,EAAD,CAAO+B,QAASA,EAASH,gBAAiBA,OCXvCgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dbfc3eaf.chunk.js","sourcesContent":["function CellTableName(props) {\r\n  return (\r\n    <td >\r\n      <img\r\n        className={\"img-cryto\"}\r\n        src={\"https://s2.coinmarketcap.com/static/img/coins/16x16/\" + props.crypto.id +\".png\"} alt=\"\"\r\n      /> {props.crypto.name}\r\n    </td>\r\n  );\r\n}\r\n\r\nexport default CellTableName;\r\n","function CellTableChange(props) {\r\n  const styles = { green: { color: \"#00ff00\" }, red: { color: \"#ff0000\" } };\r\n  return (\r\n    <td\r\n      style={\r\n        props.crypto.quote.USD.percent_change_24h < 0 ? styles.red : styles.green\r\n      }\r\n    >\r\n      {props.crypto.quote.USD.percent_change_24h.toFixed(2)}%\r\n    </td>\r\n  );\r\n}\r\n\r\nexport default CellTableChange;\r\n","import DataTable from \"react-data-table-component\";\r\nimport CellTableName from \"./CellTableName\";\r\nimport CellTableChange from \"./CellTableChange\";\r\n\r\nfunction Tabla(props) {\r\n  const columns = [\r\n    {\r\n      name: \"Rank\",\r\n      selector: (row) => row.cmc_rank,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Name\",\r\n      selector: (row) => row.name,\r\n      cell: (row) => <CellTableName crypto={row} />,\r\n    },\r\n    {\r\n      name: \"Price\",\r\n      selector: (row) => row.quote.USD.price,\r\n      format: (row) => \"$\" + row.quote.USD.price.toLocaleString(),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Market Cap\",\r\n      selector: (row) => row.quote.USD.market_cap,\r\n      format: (row) => \"$\" + row.quote.USD.market_cap.toLocaleString(),\r\n    },\r\n    {\r\n      name: \"Volume (24h)\",\r\n      selector: (row) => row.quote.USD.volume_24h,\r\n      format: (row) => \"$\" + row.quote.USD.volume_24h.toLocaleString(),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Change (24h)\",\r\n      selector: (row) => row.quote.USD.percent_change_24h,\r\n      cell: (row) => <CellTableChange crypto={row} />,\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className={\"App \" + props.progressPending } >\r\n      <DataTable\r\n        title=\"Today's Cryptocurrency Prices by Market Cap\"\r\n        columns={columns}\r\n        data={props.cryptos}\r\n        progressPending={props.progressPending}\r\n        defaultSortFieldId={1}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tabla;\r\n","const config = {\r\n\r\n    API_BASE_URL: \"http://127.0.0.1:8000/api/\",\r\n};\r\n\r\nexport default config;","import \"./App.css\";\r\nimport axios from \"axios\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Tabla from './components/tabla'\r\nimport config from \"./config\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [cryptos, setCrypto] = useState([]);\r\n    const [progressPending, setProgressPending] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const getCoins = async () => {\r\n            const response = await axios(config.API_BASE_URL);\r\n            setCrypto(response.data);\r\n            setProgressPending(false);\r\n        };\r\n        getCoins();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Tabla cryptos={cryptos} progressPending={progressPending}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}